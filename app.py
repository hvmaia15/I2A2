import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import streamlit as st
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.utils import ImageReader
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.units import inch
from reportlab.lib import colors
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings('ignore')

# ------------------- Fun√ß√µes do agente melhoradas -------------------

def analisar_df(df):
    """An√°lise completa do dataframe com mem√≥ria"""
    memoria = {}
    memoria["num_cols"] = df.select_dtypes(include="number").columns.tolist()
    memoria["cat_cols"] = df.select_dtypes(exclude="number").columns.tolist()
    memoria["estatisticas"] = df.describe()
    memoria["frequencias"] = {col: df[col].value_counts() for col in memoria["cat_cols"]}
    memoria["outliers"] = detectar_outliers(df, memoria["num_cols"])
    memoria["df"] = df
    memoria["correlacao"] = df[memoria["num_cols"]].corr() if memoria["num_cols"] else None
    memoria["info_geral"] = {
        "shape": df.shape,
        "missing_values": df.isnull().sum().sum(),
        "duplicadas": df.duplicated().sum()
    }
    memoria["graficos"] = []
    return memoria

def detectar_outliers(df, num_cols):
    """Detec√ß√£o robusta de outliers"""
    outliers = {}
    for col in num_cols:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        outliers[col] = {
            'count': len(df[(df[col] < lower_bound) | (df[col] > upper_bound)]),
            'percentual': len(df[(df[col] < lower_bound) | (df[col] > upper_bound)]) / len(df) * 100 if len(df) > 0 else 0,
            'valores': df[(df[col] < lower_bound) | (df[col] > upper_bound)][col].tolist()[:10]  # Primeiros 10 valores
        }
    return outliers

def gerar_grafico(df, col, tipo='auto'):
    """Gera gr√°ficos apropriados baseado no tipo de dado"""
    fig, ax = plt.subplots(figsize=(10, 6))
    
    if tipo == 'auto':
        if pd.api.types.is_numeric_dtype(df[col]):
            # Para colunas num√©ricas
            if len(df[col].unique()) > 20:
                sns.histplot(df[col].dropna(), kde=True, ax=ax, bins=30)
                ax.set_title(f'Distribui√ß√£o de {col}')
            else:
                df[col].value_counts().sort_index().head(30).plot.bar(ax=ax)
                ax.set_title(f'Frequ√™ncia de {col}')
        else:
            # Para colunas categ√≥ricas (limita a 30 categorias para n√£o travar)
            df[col].value_counts().head(30).plot.bar(ax=ax)
            ax.set_title(f'Valores mais frequentes - {col}')
            plt.xticks(rotation=45)
    elif tipo == 'boxplot':
        sns.boxplot(y=df[col].dropna(), ax=ax)
        ax.set_title(f'Boxplot - {col}')
    elif tipo == 'scatter':
        if len(df.select_dtypes(include='number').columns) >= 2:
            num_cols = df.select_dtypes(include='number').columns
            ax.scatter(df[num_cols[0]], df[num_cols[1]], alpha=0.6)
            ax.set_xlabel(num_cols[0])
            ax.set_ylabel(num_cols[1])
            ax.set_title(f'Dispers√£o: {num_cols[0]} vs {num_cols[1]}')
    
    plt.tight_layout()
    return fig

def gerar_heatmap_corr(memoria):
    """Gera heatmap de correla√ß√£o"""
    if memoria["correlacao"] is not None and len(memoria["num_cols"]) > 1:
        fig, ax = plt.subplots(figsize=(12, 10))
        mask = np.triu(np.ones_like(memoria["correlacao"], dtype=bool))
        sns.heatmap(memoria["correlacao"], annot=True, fmt=".2f", cmap="coolwarm", 
                   ax=ax, mask=mask, center=0)
        plt.title("Mapa de Correla√ß√£o entre Vari√°veis Num√©ricas")
        plt.tight_layout()
        return fig
    return None

def analisar_tendencias_temporais(df, memoria):
    """Analisa tend√™ncias temporais se houver coluna de tempo"""
    time_cols = [col for col in df.columns if 'time' in col.lower() or 'data' in col.lower() or 'timestamp' in col.lower()]
    
    if time_cols:
        fig, axes = plt.subplots(2, 1, figsize=(12, 10))
        time_col = time_cols[0]
        
        # Garantir que coluna de tempo est√° em formato datetime para plot
        try:
            df_time = df.copy()
            df_time[time_col] = pd.to_datetime(df_time[time_col], errors='coerce')
        except Exception:
            df_time = df.copy()
        
        # Tend√™ncia temporal
        if len(memoria["num_cols"]) > 0:
            num_col = memoria["num_cols"][0]
            axes[0].plot(df_time[time_col], df_time[num_col], alpha=0.7)
            axes[0].set_xlabel(time_col)
            axes[0].set_ylabel(num_col)
            axes[0].set_title(f'Tend√™ncia Temporal: {num_col} vs {time_col}')
        
        # Distribui√ß√£o temporal (contagens por per√≠odo)
        axes[1].hist(df_time[time_col].dropna(), bins=50, alpha=0.7)
        axes[1].set_xlabel(time_col)
        axes[1].set_ylabel('Frequ√™ncia')
        axes[1].set_title(f'Distribui√ß√£o de {time_col}')
        
        plt.tight_layout()
        return fig, f"An√°lise temporal realizada usando a coluna '{time_col}'"
    
    return None, "N√£o foi identificada coluna temporal para an√°lise de tend√™ncias"

def identificar_clusters(df, memoria):
    """Identifica clusters nos dados usando KMeans"""
    if len(memoria["num_cols"]) >= 2:
        # Usa as duas primeiras colunas num√©ricas para clusteriza√ß√£o
        X = df[memoria["num_cols"][:2]].dropna()
        
        if len(X) > 0:
            # Padroniza os dados
            scaler = StandardScaler()
            try:
                X_scaled = scaler.fit_transform(X)
            except Exception:
                return None, "Erro ao padronizar dados para clusteriza√ß√£o."
            
            # Define n√∫mero de clusters robusto (n_clusters <= n_amostras)
            n_samples = X.shape[0]
            n_clusters = min(3, n_samples)
            if n_clusters < 1:
                return None, "Amostras insuficientes para clusteriza√ß√£o."
            
            try:
                kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
                clusters = kmeans.fit_predict(X_scaled)
            except Exception as e:
                return None, f"Erro ao executar KMeans: {str(e)}"
            
            fig, ax = plt.subplots(figsize=(10, 8))
            scatter = ax.scatter(X.iloc[:, 0], X.iloc[:, 1], c=clusters, cmap='viridis', alpha=0.6)
            ax.set_xlabel(memoria["num_cols"][0])
            ax.set_ylabel(memoria["num_cols"][1])
            ax.set_title('Identifica√ß√£o de Clusters nos Dados')
            plt.colorbar(scatter)
            plt.tight_layout()
            
            return fig, f"Identificados {len(np.unique(clusters))} clusters nos dados"
    
    return None, "N√£o h√° colunas num√©ricas suficientes para an√°lise de clusters"

def conclusoes_automaticas(memoria):
    """Gera conclus√µes autom√°ticas baseadas na an√°lise dos dados"""
    df = memoria["df"]
    conclusoes = []
    
    # Informa√ß√µes gerais
    conclusoes.append("üìä **INFORMA√á√ïES GERAIS:**")
    conclusoes.append(f"- Dataset com {memoria['info_geral']['shape'][0]} linhas e {memoria['info_geral']['shape'][1]} colunas")
    conclusoes.append(f"- {len(memoria['num_cols'])} vari√°veis num√©ricas, {len(memoria['cat_cols'])} vari√°veis categ√≥ricas")
    conclusoes.append(f"- {memoria['info_geral']['missing_values']} valores missing, {memoria['info_geral']['duplicadas']} linhas duplicadas")
    
    # An√°lise de balanceamento (especialmente para coluna 'Class')
    class_cols = [c for c in df.columns if 'class' in c.lower()]
    if class_cols:
        class_col = class_cols[0]
        counts = df[class_col].value_counts()
        ratio = counts.min() / counts.max() if counts.max() != 0 else 0
        conclusoes.append(f"\n‚öñÔ∏è **AN√ÅLISE DE BALANCEAMENTO ({class_col}):**")
        conclusoes.append(f"- Distribui√ß√£o: {counts.to_dict()}")
        if ratio < 0.1:
            conclusoes.append(f"- ‚ö†Ô∏è ALERTA: Dataset muito desbalanceado (ratio: {ratio:.3f})")
        else:
            conclusoes.append(f"- Dataset relativamente balanceado (ratio: {ratio:.3f})")
    
    # An√°lise de outliers
    outliers_significativos = {k: v for k, v in memoria["outliers"].items() if v['percentual'] > 5}
    conclusoes.append(f"\nüìà **AN√ÅLISE DE OUTLIERS:**")
    if outliers_significativos:
        for col, info in list(outliers_significativos.items())[:3]:  # Mostra at√© 3 colunas
            conclusoes.append(f"- {col}: {info['count']} outliers ({info['percentual']:.1f}%)")
        conclusoes.append("- ‚ö†Ô∏è Recomenda√ß√£o: Investigar impacto dos outliers na an√°lise")
    else:
        conclusoes.append("- ‚úÖ Poucos outliers detectados")
    
    # An√°lise de correla√ß√£o
    if memoria["correlacao"] is not None:
        conclusoes.append(f"\nüîó **AN√ÅLISE DE CORRELA√á√ÉO:**")
        # Encontra correla√ß√µes fortes (abs > 0.7)
        strong_corr = []
        for i in range(len(memoria["correlacao"].columns)):
            for j in range(i+1, len(memoria["correlacao"].columns)):
                corr_val = memoria["correlacao"].iloc[i, j]
                if abs(corr_val) > 0.7:
                    strong_corr.append((memoria["correlacao"].columns[i], 
                                      memoria["correlacao"].columns[j], corr_val))
        
        if strong_corr:
            for var1, var2, corr in strong_corr[:3]:  # Mostra at√© 3 correla√ß√µes fortes
                conclusoes.append(f"- {var1} ‚Üî {var2}: {corr:.3f}")
        else:
            conclusoes.append("- Nenhuma correla√ß√£o forte detectada (|r| > 0.7)")
    
    # Recomenda√ß√µes
    conclusoes.append(f"\nüí° **RECOMENDA√á√ïES:**")
    if memoria['info_geral']['missing_values'] > 0:
        conclusoes.append("- Tratar valores missing antes de modelagem")
    if outliers_significativos:
        conclusoes.append("- Avaliar impacto dos outliers nas an√°lises")
    if class_cols and ratio < 0.1:
        conclusoes.append("- Considerar t√©cnicas para dados desbalanceados (oversampling, undersampling)")
    
    return "\n".join(conclusoes)

# ------------------- Fun√ß√µes para PDF -------------------

def adicionar_grafico_pdf(c, fig, y, width=400, height=300):
    """Adiciona gr√°fico ao PDF"""
    buf = BytesIO()
    fig.savefig(buf, format='png', dpi=150, bbox_inches='tight')
    buf.seek(0)
    img = ImageReader(buf)
    c.drawImage(img, 50, y - height - 20, width=width, height=height)
    buf.close()
    return y - height - 40

def gerar_pdf(memoria, perguntas_respostas):
    """Gera relat√≥rio PDF completo"""
    buffer = BytesIO()
    c = canvas.Canvas(buffer, pagesize=letter)
    width, height = letter
    
    # Configura√ß√µes iniciais
    y = height - 50
    c.setFont("Helvetica-Bold", 16)
    c.drawString(50, y, "Relat√≥rio de An√°lise de Dados - Agente I2A2")
    y -= 30
    
    # Informa√ß√µes gerais
    c.setFont("Helvetica-Bold", 12)
    c.drawString(50, y, "üìä Informa√ß√µes Gerais do Dataset:")
    y -= 20
    c.setFont("Helvetica", 10)
    
    info_lines = [
        f"Total de linhas: {memoria['info_geral']['shape'][0]}",
        f"Total de colunas: {memoria['info_geral']['shape'][1]}",
        f"Colunas num√©ricas: {len(memoria['num_cols'])}",
        f"Colunas categ√≥ricas: {len(memoria['cat_cols'])}",
        f"Valores missing: {memoria['info_geral']['missing_values']}",
        f"Linhas duplicadas: {memoria['info_geral']['duplicadas']}"
    ]
    
    for line in info_lines:
        if y < 100:
            c.showPage()
            y = height - 50
            c.setFont("Helvetica", 10)
        c.drawString(70, y, line)
        y -= 15
    
    y -= 10
    
    # Perguntas e respostas
    c.setFont("Helvetica-Bold", 12)
    if y < 100:
        c.showPage()
        y = height - 50
    c.drawString(50, y, "‚ùì An√°lises Realizadas:")
    y -= 25
    
    for i, (pergunta, resposta, fig) in enumerate(perguntas_respostas, 1):
        # Pergunta
        c.setFont("Helvetica-Bold", 10)
        if y < 100:
            c.showPage()
            y = height - 50
            c.setFont("Helvetica-Bold", 10)
        c.drawString(50, y, f"Pergunta {i}: {pergunta}")
        y -= 15
        
        # Resposta
        c.setFont("Helvetica", 9)
        lines = resposta.split('\n')
        for line in lines:
            if line.strip():  # Ignora linhas vazias
                # Limpa emojis e formata√ß√£o para o PDF
                clean_line = line.replace('**', '').replace('üìä', '').replace('üìà', '').replace('üîç', '')
                clean_line = clean_line.replace('üë•', '').replace('üîó', '').replace('‚öñÔ∏è', '').replace('üí°', '')
                clean_line = clean_line.replace('‚úÖ', '').replace('‚ö†Ô∏è', '').replace('ü§î', '').strip()
                
                if clean_line:
                    if y < 50:
                        c.showPage()
                        y = height - 50
                        c.setFont("Helvetica", 9)
                    
                    # Quebra linha se muito longa
                    if len(clean_line) > 100:
                        words = clean_line.split()
                        current_line = ""
                        for word in words:
                            if len(current_line + " " + word) <= 100:
                                current_line += " " + word
                            else:
                                c.drawString(70, y, current_line.strip())
                                y -= 12
                                current_line = word
                        if current_line:
                            c.drawString(70, y, current_line.strip())
                            y -= 12
                    else:
                        c.drawString(70, y, clean_line)
                        y -= 12
        
        y -= 5
        
        # Gr√°fico
        if fig is not None:
            if y < 300:  # Se n√£o h√° espa√ßo suficiente para o gr√°fico
                c.showPage()
                y = height - 50
            y = adicionar_grafico_pdf(c, fig, y)
        
        y -= 15
    
    # Adiciona conclus√µes autom√°ticas se n√£o estiverem presentes
    tem_conclusoes = any('conclus√£o' in p[0].lower() for p in perguntas_respostas)
    if not tem_conclusoes:
        if y < 150:
            c.showPage()
            y = height - 50
        
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, y, "ü§î Conclus√µes Autom√°ticas:")
        y -= 20
        
        conclusoes = conclusoes_automaticas(memoria)
        c.setFont("Helvetica", 9)
        lines = conclusoes.split('\n')
        for line in lines:
            if line.strip():
                clean_line = line.replace('**', '').replace('üìä', '').replace('‚öñÔ∏è', '').replace('üìà', '')
                clean_line = clean_line.replace('üîó', '').replace('üí°', '').replace('‚úÖ', '').replace('‚ö†Ô∏è', '').strip()
                
                if clean_line:
                    if y < 50:
                        c.showPage()
                        y = height - 50
                        c.setFont("Helvetica", 9)
                    
                    if len(clean_line) > 100:
                        words = clean_line.split()
                        current_line = ""
                        for word in words:
                            if len(current_line + " " + word) <= 100:
                                current_line += " " + word
                            else:
                                c.drawString(70, y, current_line.strip())
                                y -= 12
                                current_line = word
                        if current_line:
                            c.drawString(70, y, current_line.strip())
                            y -= 12
                    else:
                        c.drawString(70, y, clean_line)
                        y -= 12
    
    c.save()
    buffer.seek(0)
    return buffer

# ------------------- Interface Streamlit Melhorada -------------------

st.set_page_config(page_title="Agente de An√°lise de CSV - I2A2", layout="wide")

st.title("ü§ñ Agente de An√°lise de Arquivos CSV - I2A2")
st.markdown("### üìä Trabalho de Intelig√™ncia Artificial Aplicada")

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("‚ÑπÔ∏è Sobre o Agente")
    st.markdown("""
    Este agente foi desenvolvido para a **Atividade Obrigat√≥ria** do I2A2.
    
    **Capacidades:**
    - An√°lise explorat√≥ria completa
    - Detec√ß√£o de outliers
    - Identifica√ß√£o de clusters
    - An√°lise de correla√ß√£o
    - Tend√™ncias temporais
    - Conclus√µes autom√°ticas
    
    **Funcionalidades:**
    - Upload de qualquer CSV
    - Respostas a perguntas naturais
    - Gera√ß√£o de gr√°ficos
    - Relat√≥rio PDF completo
    """)
    
    st.header("üéØ Perguntas Sugeridas")
    if st.button("Tipos de dados e estrutura"):
        st.session_state.pergunta = "Quais s√£o os tipos de dados e estrutura do dataset?"
    if st.button("Distribui√ß√µes e estat√≠sticas"):
        st.session_state.pergunta = "Mostre as distribui√ß√µes e estat√≠sticas descritivas"
    if st.button("An√°lise de outliers"):
        st.session_state.pergunta = "Existem outliers nos dados? Como afetam a an√°lise?"
    if st.button("Correla√ß√µes entre vari√°veis"):
        st.session_state.pergunta = "Quais as correla√ß√µes entre as vari√°veis?"
    if st.button("Identificar clusters"):
        st.session_state.pergunta = "Existem agrupamentos nos dados?"
    if st.button("Conclus√µes autom√°ticas"):
        st.session_state.pergunta = "Quais s√£o as conclus√µes do agente sobre os dados?"

# √Årea principal
uploaded_file = st.file_uploader("üìÅ Carregue um arquivo CSV", type=["csv"])

if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file)
        st.success(f"‚úÖ Dataset carregado com sucesso: {df.shape[0]} linhas √ó {df.shape[1]} colunas")
        
        # Se for um novo arquivo (ou primeira vez), reanalisar e resetar hist√≥rico
        if 'last_uploaded_file' not in st.session_state or st.session_state.last_uploaded_file != uploaded_file.name:
            st.session_state.memoria = analisar_df(df)
            st.session_state.perguntas_respostas = []
            st.session_state.last_uploaded_file = uploaded_file.name
        else:
            # Em caso de recarregar o mesmo arquivo, atualiza a mem√≥ria tamb√©m (mant√©m hist√≥rico)
            st.session_state.memoria = analisar_df(df)
            if 'perguntas_respostas' not in st.session_state:
                st.session_state.perguntas_respostas = []
        
        # Abas para organiza√ß√£o
        tab1, tab2, tab3 = st.tabs(["üìã Visualiza√ß√£o", "‚ùì An√°lise Interativa", "üìä An√°lise R√°pida"])
        
        with tab1:
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("Pr√©-visualiza√ß√£o dos Dados")
                st.dataframe(df.head(10))
            with col2:
                st.subheader("Informa√ß√µes Gerais")
                st.write(f"**Formato:** {df.shape[0]} linhas √ó {df.shape[1]} colunas")
                st.write(f"**Colunas num√©ricas:** {len(df.select_dtypes(include='number').columns)}")
                st.write(f"**Colunas categ√≥ricas:** {len(df.select_dtypes(exclude='number').columns)}")
                st.write(f"**Valores missing:** {df.isnull().sum().sum()}")
                st.write(f"**Linhas duplicadas:** {df.duplicated().sum()}")
        
        memoria = st.session_state.memoria
        
        with tab3:
            st.subheader("üîç An√°lise R√°pida Autom√°tica")
            if st.button("Executar An√°lise Completa"):
                with st.spinner("Analisando dados..."):
                    # Gera an√°lise completa
                    fig_dist, _ = plt.subplots(figsize=(12, 8))
                    if memoria["num_cols"]:
                        # hist cria sua pr√≥pria figura; mostramos a figura corrente (fig_dist) apenas para compatibilidade
                        df[memoria["num_cols"]].hist(figsize=(12, 8), bins=20)
                        plt.tight_layout()
                        st.pyplot(plt.gcf())
                    
                    if memoria["correlacao"] is not None:
                        fig_corr = gerar_heatmap_corr(memoria)
                        if fig_corr:
                            st.pyplot(fig_corr)
                    
                    # Mostra conclus√µes
                    st.subheader("ü§î Conclus√µes Autom√°ticas")
                    conclusoes = conclusoes_automaticas(memoria)
                    st.text_area("Conclus√µes:", conclusoes, height=300)
        
        with tab2:
            st.subheader("üí¨ Fa√ßa sua pergunta")
            
            # Input de pergunta
            pergunta = st.text_input(
                "Digite sua pergunta sobre os dados:",
                value=st.session_state.get('pergunta', ''),
                key="pergunta_input"
            )
            
            if pergunta:
                with st.spinner("Processando sua pergunta..."):
                    resposta = ""
                    fig = None
                    pergunta_lower = pergunta.lower()
                    
                    # --- REGRAS DE PERGUNTAS MELHORADAS ---
                    
                    # PRIMEIRO: Verifica se √© uma pergunta sobre estat√≠sticas espec√≠ficas de uma coluna
                    coluna_encontrada = None
                    estatistica_solicitada = None
                    
                    # Procura por nomes de colunas na pergunta
                    for col in df.columns:
                        if col.lower() in pergunta_lower:
                            coluna_encontrada = col
                            break
                    
                    # Detecta qual estat√≠stica est√° sendo solicitada
                    if coluna_encontrada:
                        if any(palavra in pergunta_lower for palavra in ['m√©dia', 'media', 'average', 'mean']):
                            estatistica_solicitada = 'media'
                        elif any(palavra in pergunta_lower for palavra in ['mediana', 'median']):
                            estatistica_solicitada = 'mediana'
                        elif any(palavra in pergunta_lower for palavra in ['desvio', 'padr√£o', 'padrao', 'std']):
                            estatistica_solicitada = 'desvio_padrao'
                        elif any(palavra in pergunta_lower for palavra in ['vari√¢ncia', 'variancia', 'variability']):
                            estatistica_solicitada = 'variancia'
                        elif any(palavra in pergunta_lower for palavra in ['m√≠nimo', 'minimo', 'min', 'minimum']):
                            estatistica_solicitada = 'minimo'
                        elif any(palavra in pergunta_lower for palavra in ['m√°ximo', 'maximo', 'max', 'maximum']):
                            estatistica_solicitada = 'maximo'
                        elif any(palavra in pergunta_lower for palavra in ['soma', 'sum', 'total']):
                            estatistica_solicitada = 'soma'
                    
                    # Se encontrou coluna e estat√≠stica, responde diretamente
                    if coluna_encontrada and estatistica_solicitada:
                        if coluna_encontrada in memoria["num_cols"]:
                            if estatistica_solicitada == 'media':
                                valor = df[coluna_encontrada].mean()
                                resposta = f"üìä A m√©dia da coluna **{coluna_encontrada}** √©: **{valor:.4f}**"
                            elif estatistica_solicitada == 'mediana':
                                valor = df[coluna_encontrada].median()
                                resposta = f"üìä A mediana da coluna **{coluna_encontrada}** √©: **{valor:.4f}**"
                            elif estatistica_solicitada == 'desvio_padrao':
                                valor = df[coluna_encontrada].std()
                                resposta = f"üìä O desvio padr√£o da coluna **{coluna_encontrada}** √©: **{valor:.4f}**"
                            elif estatistica_solicitada == 'variancia':
                                valor = df[coluna_encontrada].var()
                                resposta = f"üìä A vari√¢ncia da coluna **{coluna_encontrada}** √©: **{valor:.4f}**"
                            elif estatistica_solicitada == 'minimo':
                                valor = df[coluna_encontrada].min()
                                resposta = f"üìä O valor m√≠nimo da coluna **{coluna_encontrada}** √©: **{valor:.4f}**"
                            elif estatistica_solicitada == 'maximo':
                                valor = df[coluna_encontrada].max()
                                resposta = f"üìä O valor m√°ximo da coluna **{coluna_encontrada}** √©: **{valor:.4f}**"
                            elif estatistica_solicitada == 'soma':
                                valor = df[coluna_encontrada].sum()
                                resposta = f"üìä A soma total da coluna **{coluna_encontrada}** √©: **{valor:.4f}**"
                            
                            # Adiciona informa√ß√µes extras
                            resposta += f"\n\nüìà **Estat√≠sticas completas de {coluna_encontrada}:**"
                            stats = df[coluna_encontrada].describe()
                            resposta += f"\n- M√©dia: {stats['mean']:.4f}"
                            resposta += f"\n- Mediana: {stats['50%']:.4f}"
                            resposta += f"\n- Desvio Padr√£o: {stats['std']:.4f}"
                            resposta += f"\n- M√≠nimo: {stats['min']:.4f}"
                            resposta += f"\n- M√°ximo: {stats['max']:.4f}"
                            resposta += f"\n- Q1 (25%): {stats['25%']:.4f}"
                            resposta += f"\n- Q3 (75%): {stats['75%']:.4f}"
                            
                            # Gera gr√°fico da coluna
                            fig = gerar_grafico(df, coluna_encontrada)
                            
                        else:
                            # Para colunas categ√≥ricas
                            if estatistica_solicitada in ['media', 'mediana', 'desvio_padrao', 'variancia']:
                                resposta = f"‚ö†Ô∏è A coluna **{coluna_encontrada}** √© categ√≥rica, n√£o √© poss√≠vel calcular {estatistica_solicitada}."
                            else:
                                freq = df[coluna_encontrada].value_counts()
                                resposta = f"üìä **An√°lise da coluna categ√≥rica {coluna_encontrada}:**\n\n"
                                resposta += f"- Total de categorias: {len(freq)}\n"
                                resposta += f"- Valor mais frequente: {freq.index[0]} ({freq.iloc[0]} ocorr√™ncias)\n"
                                resposta += f"- Valor menos frequente: {freq.index[-1]} ({freq.iloc[-1]} ocorr√™ncias)\n\n"
                                resposta += "**Top 5 valores mais frequentes:**\n"
                                for i, (valor, count) in enumerate(freq.head().items()):
                                    percentual = (count / len(df)) * 100
                                    resposta += f"{i+1}. {valor}: {count} ({percentual:.1f}%)\n"
                                
                                fig = gerar_grafico(df, coluna_encontrada)
                    
                    # SE N√ÉO ENCONTROU ESTAT√çSTICA ESPEC√çFICA, continua com as regras originais
                    elif not resposta:
                        # Tipos de dados e estrutura
                        if any(palavra in pergunta_lower for palavra in ['tipo', 'dados', 'estrutura', 'coluna']):
                            resposta = "**üìù ESTRUTURA DO DATASET:**\n\n"
                            resposta += f"- Total de colunas: {len(df.columns)}\n"
                            resposta += f"- Total de linhas: {len(df)}\n\n"
                            
                            resposta += "**Colunas Num√©ricas:**\n"
                            for col in memoria["num_cols"]:
                                resposta += f"- {col} ({df[col].dtype})\n"
                            
                            resposta += "\n**Colunas Categ√≥ricas:**\n"
                            for col in memoria["cat_cols"]:
                                resposta += f"- {col} ({df[col].dtype})\n"
                        
                        # Distribui√ß√µes e estat√≠sticas
                        elif any(palavra in pergunta_lower for palavra in ['distribui√ß√£o', 'histograma', 'estat√≠stica', 'descritiv']):
                            if memoria["num_cols"]:
                                resposta = "**üìä ESTAT√çSTICAS DESCRITIVAS:**\n\n"
                                stats = df[memoria["num_cols"]].describe()
                                for col in stats.columns:
                                    resposta += f"**{col}:**\n"
                                    resposta += f"- M√©dia: {stats[col]['mean']:.2f}\n"
                                    resposta += f"- Mediana: {stats[col]['50%']:.2f}\n"
                                    resposta += f"- Desvio Padr√£o: {stats[col]['std']:.2f}\n"
                                    resposta += f"- M√≠nimo: {stats[col]['min']:.2f}\n"
                                    resposta += f"- M√°ximo: {stats[col]['max']:.2f}\n\n"
                                
                                # Gera histogramas
                                if len(memoria["num_cols"]) <= 6:
                                    fig, axes = plt.subplots(2, 3, figsize=(15, 10))
                                    axes = axes.flatten()
                                    for i, col in enumerate(memoria["num_cols"][:6]):
                                        if i < len(axes):
                                            df[col].hist(ax=axes[i], bins=20, alpha=0.7)
                                            axes[i].set_title(f'Distribui√ß√£o de {col}')
                                    plt.tight_layout()
                            else:
                                resposta = "N√£o h√° colunas num√©ricas para an√°lise estat√≠stica."
                        
                        # Outliers
                        elif any(palavra in pergunta_lower for palavra in ['outlier', 'at√≠pico', 'anomalia']):
                            resposta = "**üîç AN√ÅLISE DE OUTLIERS:**\n\n"
                            outliers_detectados = False
                            
                            for col, info in memoria["outliers"].items():
                                if info['count'] > 0:
                                    outliers_detectados = True
                                    resposta += f"**{col}:**\n"
                                    resposta += f"- {info['count']} outliers ({info['percentual']:.1f}% dos dados)\n"
                                    if info['percentual'] > 5:
                                        resposta += f"- ‚ö†Ô∏è Impacto significativo esperado\n"
                                    resposta += "\n"
                            
                            if not outliers_detectados:
                                resposta += "‚úÖ Poucos ou nenhum outlier detectado nos dados.\n"
                            else:
                                resposta += "\n**Recomenda√ß√µes:**\n"
                                resposta += "- Investigar se outliers representam erros ou casos especiais\n"
                                resposta += "- Avaliar impacto nas an√°lises estat√≠sticas\n"
                                resposta += "- Considerar transforma√ß√µes ou remo√ß√£o se necess√°rio"
                        
                        # Correla√ß√£o
                        elif any(palavra in pergunta_lower for palavra in ['correla√ß√£o', 'rela√ß√£o', 'associa√ß√£o']):
                            fig = gerar_heatmap_corr(memoria)
                            if fig:
                                resposta = "**üîó MAPA DE CORRELA√á√ÉO:**\n\n"
                                resposta += "Heatmap gerado mostrando as correla√ß√µes entre vari√°veis num√©ricas.\n"
                                resposta += "Valores pr√≥ximos de +1 indicam correla√ß√£o positiva forte.\n"
                                resposta += "Valores pr√≥ximos de -1 indicam correla√ß√£o negativa forte.\n"
                                resposta += "Valores pr√≥ximos de 0 indicam pouca ou nenhuma correla√ß√£o."
                            else:
                                resposta = "N√£o h√° colunas num√©ricas suficientes para an√°lise de correla√ß√£o."
                        
                        # Clusters
                        elif any(palavra in pergunta_lower for palavra in ['cluster', 'agrupamento', 'grupo']):
                            fig, cluster_info = identificar_clusters(df, memoria)
                            resposta = f"**üë• AN√ÅLISE DE CLUSTERS:**\n\n{cluster_info}"
                        
                        # Tend√™ncias temporais
                        elif any(palavra in pergunta_lower for palavra in ['tend√™ncia', 'temporal', 'time', 'sazonal']):
                            fig, trend_info = analisar_tendencias_temporais(df, memoria)
                            resposta = f"**üìà AN√ÅLISE TEMPORAL:**\n\n{trend_info}"
                        
                        # Conclus√µes
                        elif any(palavra in pergunta_lower for palavra in ['conclus√£o', 'conclusoes', 'resumo', 'insight']):
                            resposta = conclusoes_automaticas(memoria)
                        
                        # Gr√°fico espec√≠fico
                        elif any(palavra in pergunta_lower for palavra in ['gr√°fico', 'plot', 'visualizar', 'mostrar']):
                            coluna_encontrada = None
                            for col in df.columns:
                                if col.lower() in pergunta_lower:
                                    coluna_encontrada = col
                                    break
                            
                            if coluna_encontrada:
                                fig = gerar_grafico(df, coluna_encontrada)
                                resposta = f"**üìà GR√ÅFICO DE {coluna_encontrada.upper()}:**\n\nGr√°fico gerado com sucesso."
                            else:
                                resposta = "Por favor, especifique qual coluna voc√™ gostaria de visualizar."
                        
                        # Pergunta n√£o reconhecida
                        else:
                            resposta = "ü§î N√£o entendi completamente sua pergunta. Tente ser mais espec√≠fico ou usar palavras como:\n\n"
                            resposta += "- 'm√©dia da coluna X', 'mediana de Y'\n"
                            resposta += "- 'tipos de dados', 'estrutura'\n"
                            resposta += "- 'distribui√ß√£o', 'estat√≠sticas'\n" 
                            resposta += "- 'outliers', 'anomalias'\n"
                            resposta += "- 'correla√ß√£o', 'rela√ß√£o entre vari√°veis'\n"
                            resposta += "- 'clusters', 'agrupamentos'\n"
                            resposta += "- 'tend√™ncias temporais'\n"
                            resposta += "- 'conclus√µes', 'insights'\n"
                            resposta += "- 'gr√°fico de [nome da coluna]'"
                    
                    # Exibe resposta
                    # garante que perguntas_respostas exista
                    if 'perguntas_respostas' not in st.session_state:
                        st.session_state.perguntas_respostas = []
                    
                    st.subheader("üí° Resposta do Agente")
                    st.text_area("Resposta:", resposta, height=200, key=f"resposta_{len(st.session_state.perguntas_respostas)}")
                    
                    if fig:
                        st.pyplot(fig)
                    
                    # Armazena para PDF
                    st.session_state.perguntas_respostas.append((pergunta, resposta, fig))
                    
    except Exception as e:
        st.error(f"Erro ao processar o arquivo: {str(e)}")

# Gera√ß√£o do PDF
if 'perguntas_respostas' in st.session_state and st.session_state.perguntas_respostas:
    st.markdown("---")
    st.subheader("üìÑ Relat√≥rio PDF")
    
    if st.button("üì• Gerar Relat√≥rio PDF Completo"):
        with st.spinner("Gerando relat√≥rio PDF..."):
            # Adiciona an√°lise completa ao PDF
            perguntas_completas = st.session_state.perguntas_respostas.copy()
            
            # Adiciona conclus√µes autom√°ticas se n√£o estiverem presentes
            tem_conclusoes = any('conclus√£o' in p[0].lower() for p in perguntas_completas)
            if not tem_conclusoes:
                conclusoes = conclusoes_automaticas(st.session_state.memoria)
                perguntas_completas.append(("Conclus√µes autom√°ticas do agente", conclusoes, None))
            
            pdf_buffer = gerar_pdf(st.session_state.memoria, perguntas_completas)
            
            st.success("‚úÖ Relat√≥rio PDF gerado com sucesso!")
            st.download_button(
                label="‚¨áÔ∏è Download do Relat√≥rio PDF",
                data=pdf_buffer,
                file_name="Relatorio_Agente_I2A2.pdf",
                mime="application/pdf"
            )

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: gray;'>
    ü§ñ Agente de An√°lise de CSV - Desenvolvido para I2A2 - Atividade Obrigat√≥ria 2025
    </div>
    """,
    unsafe_allow_html=True
)
